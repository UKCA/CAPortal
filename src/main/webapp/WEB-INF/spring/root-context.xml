<?xml version="1.0" encoding="UTF-8"?>
<!--
Spring root context 
@author David Meredith  
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
     	http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"> -->
<!-- Note, Rather than specify the versioned XSD, use the default with no version numbers as per: 
    http://stackoverflow.com/questions/17022058/what-xmlns-schemalocation-to-use-in-spring-context-file-->

    <context:annotation-config/> 


	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- Scans within the base package of the application for @Components to configure as beans -->
    <context:component-scan base-package="uk.ac.ngs">
        <!-- Exclude controllers, as these are created in child servlet-context.xml  
        so we don't want to create them twice -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>   
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>   
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>   
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>-->   
    </context:component-scan>
    
    <context:property-placeholder location="/WEB-INF/project.properties"/>
   

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 
	Enable @Transactional annotations.
	Spring recommends that you only annotate concrete classes (and their methods)
    with @Transactional, as opposed to annotating interfaces. You certainly
    can place the annotation on an interface (or an interface method), but 
    beware that Java annotations are not always inherited from interfaces (depending on 
    the weaving style).  

    Note, <tx:annotation-driven/> only looks for @Transactional on beans in the 
    same application context they are defined in. This means that, if you put 
    annotation driven configuration in a WebApplicationContext for a DispatcherServlet, 
    it only checks for @Transactional beans in your controllers, and not your services. 
    See Section 16.2, “The DispatcherServlet” for more information.
	-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--
	Components are scanned with @Repository and @DataSource injected with @Inject
	so we don't define DAOs explicitly.  
	<bean id="jdbcCaUserAuthDao" class="uk.ac.ngs.dao.JdbcCaUserAuthDao"/>
	<bean id="jdbcCaActionsDao" class="uk.ac.ngs.dao.JdbcRaopListDao"/>
	 -->
	<bean id="securityContextService" class="uk.ac.ngs.security.SecurityContextService"/> 


    <!-- 
    Bean to wrap config options used when validating pkcs10 certification requests. 
    -->
    <bean id="csrRequestValidationParams" class="uk.ac.ngs.validation.CsrRequestValidationConfigParams"> 
        <constructor-arg type="java.lang.String" index="0" value="${supported.pkcs10.country.oid}"/>
        <constructor-arg type="java.lang.String" index="1" value="${supported.pkcs10.orgname.oid}"/>
        <property name="minModulus" value="${supported.pkcs10.min.modulus}"/>
        <property name="minExponent" value="${supported.pkcs10.min.exponent}"/>
         <!-- property setRalistDao is @Injected -->
    </bean>

    <bean id="dnValidator" class="uk.ac.ngs.validation.PKCS10SubjectDNValidator">
        <constructor-arg ref="csrRequestValidationParams"/>
    </bean>

 
    <bean id="p10Validator" class="uk.ac.ngs.validation.PKCS10Validator">
         <constructor-arg ref="csrRequestValidationParams"/>
    </bean>

    <!-- We have more than one Spring Validator interface in the spring beans, 
    therefore we set primary=true to nominate which validator to use when injecting 
    dependencies. There are other methods around this too. -->
    <bean id="csrRequestDbValidator" class="uk.ac.ngs.validation.CsrRequestDbValidator" primary="true">
        <constructor-arg index="0" ref="dnValidator"/>
        <constructor-arg index="1" ref="p10Validator"/>
        <!-- property setJdbcRequestDao is @Autowired -->
        <!-- property setJdbcCertificateDao is @Autowired -->
    </bean>

    <bean id="mutableConfigParams" class="uk.ac.ngs.common.MutableConfigParams">
        <constructor-arg type="java.lang.String" index="0" value="${mutable.config.params.full.path}"/>
    </bean>
    
    <!-- A base template message that we can pre-load with default state -->
    <bean id="BaseEmailTemplate" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="${email.from}"/>
        <property name="subject" value="UK CA Action Required"/>
    </bean>  

    <bean id="emailService" class="uk.ac.ngs.service.email.EmailService">
        <property name="emailTemplate" ref="BaseEmailTemplate"/>    
        <property name="emailRaRenewTemplate" value="emailRaRenewTemplate.html"/>
        <property name="emailRaNewHostTemplate" value="emailRaNewHostTemplate.html"/>
        <property name="emailRaNewUserTemplate" value="emailRaNewUserTemplate.html"/>
        <property name="emailRaRevokeTemplate"  value="emailRaRevokeTemplate.html"/>
        <property name="emailUserNewUserCertTemplate" value="emailUserNewUserCertTemplate.html"/>
        <property name="emailUserNewHostCertTemplate" value="emailUserNewHostCertTemplate.html"/>
        <property name="emailAdminsOnErrorTemplate" value="emailAdminsOnErrorTemplate.html"/> 
        <property name="emailRaEmailChangeTemplate" value="emailRaEmailChangeTemplate.html"/>
        <property name="basePortalUrl" value="${base.portal.url}"/>
        <!-- mailSender is @injected -->
    </bean>
    
 

    <!-- 
    You will almost certainly have to modify the configuration of the mailSender
    bean for your deployment/requirements. There are more properties available 
    than are listed/configured here. Of course, you can define place-holders such 
    as ${email.host} and then specify the value in the 'project.properties' file 
    (this properties file is imported to populate the placeholders)  
    -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${email.host}" />
<!--        <property name="port" value="${email.port}" />
        <property name="username" value="${email.username}" />
        <property name="password" value="${email.password}" />
 
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>-->
    </bean>


    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer" >
        <property name="templateLoaderPath" value="/WEB-INF/freemarker/email/"/>
    </bean>


</beans>
